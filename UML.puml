@startuml UML

interface IMovable{
    + {abstract} move( v : Vect2f& ): void
    + {abstract} moveTo( v : Vect2f& ): void
}


class Vector2 {
    + x : T
    + y : T 

    + Vector2()
    + Vector2( aX : T&, aY : T&)
    + Vector2( v : Vector2<T>)
    + ~Vector2()

    + operator=( v : Vector2<T>& ): Vector2<T>&
    + operator==( v : Vector2<T>& ): bool
    + operator!=( v : Vector2<T>& ): bool
    + operator<( v : Vector2<T>& ): bool
    + operator<=( v : Vector2<T>& ): bool
    + operator>( v : Vector2<T>& ): bool
    + operator>=( v : Vector2<T>& ): bool

    + operator+=( v : Vector2<T>& ): Vector2<T>&
    + operator-=( v : Vector2<T>& ): Vector2<T>&
    + operator+( v : Vector2<T>& ): Vector2<T>
    + operator-( v : Vector2<T>& ): Vector2<T>
    + operator*( v : Vector2<T>& ): T
    + operator*( t : T ): Vector2<T>

    + operator<<( ofs : ostream&, v : Vector2<T>& ): ostream&
    + operator>>( ifs : istream&, v : Vector2<T>& ): istream&
}

class Vector3 {
    + x : T
    + y : T 
    + z : T

    + Vector3()
    + Vector3( aX : T&, aY : T&)
    + Vector3( v : Vector3<T>)
    + ~Vector3()

    + operator=( v : Vector3<T>& ): Vector3<T>&
    + operator==( v : Vector3<T>& ): bool
    + operator!=( v : Vector3<T>& ): bool
    + operator<( v : Vector3<T>& ): bool
    + operator<=( v : Vector3<T>& ): bool
    + operator>( v : Vector3<T>& ): bool
    + operator>=( v : Vector3<T>& ): bool

    + operator+=( v : Vector3<T>& ): Vector3<T>&
    + operator-=( v : Vector3<T>& ): Vector3<T>&
    + operator+( v : Vector3<T>& ): Vector3<T>
    + operator-( v : Vector3<T>& ): Vector3<T>
    + operator*( v : Vector3<T>& ): T
    + operator*( t : T ): Vector3<T>

    + operator<<( ofs : ostream&, v : Vector3<T>& ): ostream&
    + operator>>( ifs : istream&, v : Vector2<T>& ): istream&
}


class Card
{
    # id : int
    # value : float
    # size : Vect2f
    # position : Vect2f

    + Card()
    + Card( aX : float, aY : float )
    + Card( v : Vect2f& )
    + Card( aX : float, aY : float, aId : int )
    + Card( v: Vect2f&, aId : int )
    + Card( aX : float, aY : float, aValue : float )
    + Card( v : Vect2f&, aValue : float )
    + Card( aX : float, aY : float, aId : int, aValue : float)
    + Card( v : Vect2f&, aId : int, aValue : float )
    + Card( aX : float, aY : float, aPos : Vect2f& )
    + Card( v : Vect2f&, aPos : Vect2f& )
    + Card( aX : float, aY : float, aId : int, aPos : Vect2f& )
    + Card( v : Vect2f&, aId : int, aPos : Vect2f& )
    + Card( aX : float, aY : float, aId : int, aValue : float, aPos : Vect2f& )
    + Card( v : Vect2f&, aId : int, aValue : float, aPos : Vect2f& )
    + ~Card()

    + operator=( c : Card&): Card&
    
    + getSize(): Vect2f&
    + getId(): int&

    + move( v : Vect2f& ): void
    + moveTo( v : Vect2f& ): void
}

class Deck{
    # size : int
    # pile : list<Card*>

    + Deck()
    + Deck( d : Deck& )
    + ~Deck

    + operator=( d : Deck& ): Deck&
    + operator[]( i : size_t ): Card&

    + getSize(): int

    + add_front( c : Card* ): void
    + add_back( c : Card* ): void
    + pick_up(): Card*
    + give_front(): void
    + give_back(): void
    + shuffle(): void
}

class Player{
    # name : string
    # id : int
    # pawn : Pawn
    # hand : Deck
    
    + Player( n : string )
    + Player( n : string, aId : int, pa : Pawn&)
    + Player( n : string, aId : int, d : Deck&)
    + Player( n : string, aId : int, pa : Pawn&, d : Deck&)
    + ~Player()

    + operator=( p : Player&): Player&

    + getName(): string&
    + getId(): int&
    + getPawn(): Pawn&
    + getPosition(): Vect2f&
    + getHand(): Deck&

    + login(): void
    + logout(): void
    + movePawn(): void
    + movePawnTo(): void
}

class Pawn{
    # position : Vect2f

    + Pawn()
    + Pawn( pos : Vect2f& )
    + Pawn( aX : float, aY : float )
    + ~Pawn()

    + operator=( p : Pawn& ): Pawn&

    + getPosition(): Vect2f&
    + move( v : Vect2f& ): void
    + moveTo( v : Vect2f& ): void
}

class Game{
    + state : int
    + deck : Deck
    + discard : Deck
    + player : vector<Player*>

    + Game()
    + ~Game()

    + operator=( g : Game& ): Game&
    + operator[]( i : size_t ): Player*

    + setState( s : int ): void
}

IMovable --|> Card
IMovable --|> Pawn


Card "1" *-- "1" Vector2

Deck "1" *-- "0..n" Card

Player "1" *-- "1" Pawn
Player "1" *-- "1" Deck

Game "4" *-- "1" Player
Game "2" *-- "1" Deck

@enduml