@startuml UML

set namespaceSeparator ::

interface rsc::IMovable <template<typename T>>{
    + {abstract} move( v : T& ): void
    + {abstract} moveTo( v : T& ): void
}

class rsc::Vector2<template<typename T>> {
    + x : T
    + y : T 

    + Vector2()
    + Vector2( aX : T&, aY : T&)
    + Vector2( v : Vector2<T>&)
    + ~Vector2()

    + operator=( v : Vector2<T>& ): Vector2<T>&
    + operator==( v : Vector2<T>& ): bool
    + operator!=( v : Vector2<T>& ): bool
    + operator<( v : Vector2<T>& ): bool
    + operator<=( v : Vector2<T>& ): bool
    + operator>( v : Vector2<T>& ): bool
    + operator>=( v : Vector2<T>& ): bool

    + operator+=( v : Vector2<T>& ): Vector2<T>&
    + operator-=( v : Vector2<T>& ): Vector2<T>&
    + operator+( v : Vector2<T>& ): Vector2<T>
    + operator-( v : Vector2<T>& ): Vector2<T>
    + operator*( v : Vector2<T>& ): T
    + operator*( t : T ): Vector2<T>

    + operator<<( ofs : ostream&, v : Vector2<T>& ): ostream&
    + operator>>( ifs : istream&, v : Vector2<T>& ): istream&
}

class rsc::Vector3<template<typename T>> {
    + x : T
    + y : T 
    + z : T

    + Vector3()
    + Vector3( aX : T&, aY : T&)
    + Vector3( v : Vector3<T>)
    + ~Vector3()

    + operator=( v : Vector3<T>& ): Vector3<T>&
    + operator==( v : Vector3<T>& ): bool
    + operator!=( v : Vector3<T>& ): bool
    + operator<( v : Vector3<T>& ): bool
    + operator<=( v : Vector3<T>& ): bool
    + operator>( v : Vector3<T>& ): bool
    + operator>=( v : Vector3<T>& ): bool

    + operator+=( v : Vector3<T>& ): Vector3<T>&
    + operator-=( v : Vector3<T>& ): Vector3<T>&
    + operator+( v : Vector3<T>& ): Vector3<T>
    + operator-( v : Vector3<T>& ): Vector3<T>
    + operator*( v : Vector3<T>& ): T
    + operator*( t : T ): Vector3<T>

    + operator<<( ofs : ostream&, v : Vector3<T>& ): ostream&
    + operator>>( ifs : istream&, v : Vector2<T>& ): istream&
}


class rsc::Card
{
    # value : float

    + Card()
    + Card( aV : float )
    + Card( c : Card& )
    + ~Card()

    + operator=( c : Card&): Card&
    
    + getValue(): float
}

class rsc::Deck{
    # size : size_t
    # pile : list<shared_ptr<Card>>

    + Deck()
    + Deck( d : Deck& )
    + ~Deck()

    + operator=( d : Deck& ): Deck&
    + operator[]( i : size_t ): shared_ptr<Card>&

    + getSize(): int&

    + add( c : shared_ptr<Card>, loc : int ): void
    + pick_up(): shared_ptr<Card>
    + give_to( i : size_t, d : Deck&, loc : int): void
    + shuffle(): void
}

class rsc::Player{
    # dir : int
    # connected : bool
    
    + Player()
    + Player(aDir : int)
    + ~Player()

    + operator=( p : Player&): Player&

    + getDir() : int&
    + isConnected() : bool&

    + login(): void
    + logout(): void
}

class rsc::Pawn <template<typename T>>{
    # position : T

    + Pawn()
    + Pawn( pos : T& )
    + ~Pawn()

    + operator=( p : Pawn2& ): Pawn2&

    + getPosition(): T&

    + move( v : T& ): void
    + moveTo( v : T& ): void
}

class rsc::Game{
    # address : ENetAddress
    # server : ENetHost*
    # peer : ENetPeer*
    # recMess : char[]
    # mess : char[]
    # nbConnectes : int
    + state : int
    + event : ENetEvent

    + Game()
    + {abstract} ~Game()

    + operator=( g : Game& ): Game&

    + getState() : int&
    + setState( s : int ): void

    + {static} initialize_server() : void
    + launch( serv_addr_port : int ) : void
    + sendBroadcast( mess : char* ) : void
    + game_host_service() : int
    + receive_event() : void

    + {abstract} handleIncommingMessage() : void
}

rsc::IMovable <|-- rsc::Pawn

rsc::Deck "1" *-- "0..n" rsc::Card

@enduml